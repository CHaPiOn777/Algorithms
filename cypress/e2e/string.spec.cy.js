import { circle } from "../constants/constants";

export const timeString = 1000;

describe('Корректность работы разворота строки', () => {
  beforeEach(() => {
    cy.visit(`/`)
    cy.get('a[href*="/recursion"]').click()
    cy.contains('Строка')
  });
  it('Если в инпуте пусто, то кнопка добавления недоступна.', () => {
    cy.get('form').within(() => {
      cy.get('input').should('have.value', '')
      cy.get('button').should('be.disabled')
    })
  })
  it('Проверить корректность работы алгоритма разворота строки', () => {
    cy.clock()
    cy.get('form').within(() => {
      cy.get('input').type('12345')
      cy.get('button').click()
      cy.get('button').should('be.disabled')
    })

    cy.get(circle)
      .then(el => {
        cy.get(el[0])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_changing'))
        cy.get(el[0])
          .children()
          .should('have.text', '1')
        cy.get(el[1])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_default'))
        cy.get(el[1])
          .children()
          .should('have.text', '2')
        cy.get(el[2])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_default'))
        cy.get(el[2])
          .children()
          .should('have.text', '3')
        cy.get(el[3])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_default'))
        cy.get(el[3])
          .children()
          .should('have.text', '4')
        cy.get(el[4])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_changing'))
        cy.get(el[4])
          .children()
          .should('have.text', '5')
      })
    cy.tick(timeString)
    cy.get(circle)
      .then(el => {
        cy.get(el[0])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_modified'))
        cy.get(el[0])
          .children()
          .should('have.text', '5')
        cy.get(el[1])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_changing'))
        cy.get(el[1])
          .children()
          .should('have.text', '2')
        cy.get(el[2])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_default'))
        cy.get(el[2])
          .children()
          .should('have.text', '3')
        cy.get(el[3])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_changing'))
        cy.get(el[3])
          .children()
          .should('have.text', '4')
        cy.get(el[4])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_modified'))
        cy.get(el[4])
          .children()
          .should('have.text', '1')
      })
    cy.tick(timeString)
    cy.get(circle)
      .then(el => {
        cy.get(el[0])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_modified'))
        cy.get(el[0])
          .children()
          .should('have.text', '5')
        cy.get(el[1])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_modified'))
        cy.get(el[1])
          .children()
          .should('have.text', '4')
        cy.get(el[2])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_modified'))
        cy.get(el[2])
          .children()
          .should('have.text', '3')
        cy.get(el[3])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_modified'))
        cy.get(el[3])
          .children()
          .should('have.text', '2')
        cy.get(el[4])
          .invoke('attr', 'class')
          .then(classList => expect(classList).contains('circle_modified'))
        cy.get(el[4])
          .children()
          .should('have.text', '1')
      })
  })
})